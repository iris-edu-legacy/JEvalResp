<project name="JEvalResp" default="dist" basedir=".">

  <description>
    Build file for JEvalResp.
    Tested with ant 1.7.1, jdk 1.7.0
  </description>

  <property name="src" location="src"/>
  <property name="build" location="build"/>
  <property name="tmp1" location="tmp1"/>
  <property name="tmp2" location="tmp2"/>
  <property name="dist"  location="dist"/>
  <property name="jars"  location="jars"/>
  <property name="doc"  location="doc"/>
  <property name="c"  location="c"/>
  <property name="webdist"  location="webdist"/>

  <!-- these are part of the standard (assumed) build environment
       see Libraries.txt file -->
  <property name="fissure"  location="jars"/>
  <property name="utils"  location="jars"/>
  <property name="regexp"  location="jars"/>
  <property name="orbacus"  location="jars"/>

  <property name="version" value="1.80"/>
  <property name="jar" value="JEvalResp.jar"/>
  <property name="run" value="com.isti.jevalresp.Run"/>
  <property name="runext" value="com.isti.jevalresp.RunExt"/>


  <!-- these are defined separately because they are used boh
       in the classpath and in packing the final jar. -->
  <fileset id="orb.jars" dir="${orbacus}">
    <include name="OB.jar"/>
    <include name="OBNaming.jar"/>
  </fileset>
  <fileset id="fissure.jars" dir="${fissure}">
    <include name="FissuresIDL.jar"/>
    <include name="FissuresImpl.jar"/>
  </fileset>
  <fileset id="utils.jars" dir="${utils}" includes="isti.util.jar"/>
  <fileset id="regexp.jars" dir="${regexp}" includes="gnu-regexp-1.1.3.jar"/>
  <fileset id="irisws.jars" dir="${jars}" includes="IRIS-WS-2.0.11.jar"/>
  <fileset id="junit.jars" dir="${jars}">
    <include name="junit-4.12.jar"/>
    <include name="hamcrest-core-1.3.jar"/>
  </fileset>


  <path id="build.classpath">
    <fileset refid="orb.jars"/>
    <fileset refid="fissure.jars"/>
    <fileset refid="utils.jars"/>
    <fileset refid="regexp.jars"/>
    <fileset refid="irisws.jars"/>
    <fileset refid="junit.jars"/>
  </path>


  <target name="init">
    <tstamp/>
    <mkdir dir="${build}"/>
    <mkdir dir="${dist}"/>
  </target>

  <target name="compile" depends="init" description="compile the source" >
    <javac srcdir="${src}" destdir="${build}" compiler="modern"
           debug="true" debuglevel="lines,vars,source"
           target="1.5" source="1.5">
      <classpath refid="build.classpath"/>
    </javac>
  </target>

  <target name="test" depends="compile">
    <junit printsummary="yes" showoutput="yes" haltonfailure="no" failureproperty="tests.failed">
      <classpath path="${build}">
        <path refid="build.classpath"/>
        <!-- files needed by tests -->
        <dirset dir="${basedir}"/>
        <dirset dir="${src}/com/isti/jevalresp/tests/data/"/>
      </classpath>
      <batchtest fork="yes">
        <fileset dir="${src}" includes="**/*AntTest.java"/>
        <!-- fileset dir="${src}">
          <include name="**/Location8XmlAntTest.java"/>
        </fileset -->
      </batchtest>
      <formatter type="plain" usefile="false"/>
      <formatter type="xml"/>
    </junit>
    <!-- run all tests THEN fail -->
    <fail message="Test failure detected, check test results." if="tests.failed" />
  </target>

  <target name="jars" depends="compile" description="generate the jar" >

    <!-- stage 1: everything except iwis-ws -->
    <delete dir="${tmp1}"/><mkdir dir="${tmp1}"/>
    <copy todir="${tmp1}">
      <fileset dir="${build}"/>
    </copy>
    <unzip dest="${tmp1}">
      <fileset refid="orb.jars"/>
      <fileset refid="fissure.jars"/>
      <fileset refid="utils.jars"/>
      <fileset refid="regexp.jars"/>
    </unzip>

    <!-- stage 2: deps from stage 1 + all of iris-ws (dynamic loading) -->
    <delete dir="${tmp2}"/><mkdir dir="${tmp2}"/>
    <copy todir="${tmp2}">
      <classfileset dir="${tmp1}">
        <root classname="${run}"/>
        <root classname="${runext}"/> <!-- called from jplotresp -->
        <exclude name="**/*.RSA, **/*.SF, **/*.DSA"/> <!-- signature files -->
      </classfileset>
      <fileset dir="${tmp1}" includes="gnu/regexp/MessagesBundle.properties"/>
      <fileset dir="${tmp1}" includes="edu/iris/dmc/iris.properties"/>
    </copy>
    <unzip dest="${tmp2}">
      <fileset refid="irisws.jars"/>
    </unzip>

    <jar compress="true" jarfile="${jars}/${jar}">
      <fileset dir="${tmp2}" includes="**/*.class"/>
      <fileset dir="${tmp2}" includes="gnu/regexp/MessagesBundle.properties"/>
      <fileset dir="${tmp2}" includes="edu/iris/dmc/iris.properties"/>
      <manifest>
        <attribute name="Main-Class" value="${run}"/>
      </manifest>
    </jar>

    <delete dir="${tmp1}"/><delete dir="${tmp2}"/>

    <!-- source jar too -->
    <jar compress="true" jarfile="${jars}/src.jar">
      <fileset dir="${src}" includes="**/*.java"/>
      <fileset dir="${src}" includes="**/*.html"/>
    </jar>

    <!-- classes for source onlt(?) -->
    <jar compress="true" jarfile="${jars}/JEvalRespClasses.jar">
      <fileset dir="${build}" includes="**/*.class"/>
    </jar>

  </target>

  <target name="dist" depends="jars" description="generate the distribution">

    <property name="vdir" value="JEvalResp_v${version}_dist"/>
    <property name="distvdir" value="${dist}/${vdir}"/>
    <delete dir="${distvdir}"/><mkdir dir="${distvdir}"/>

    <copy file="${jars}/${jar}" todir="${distvdir}"/>
    <copy file="${jars}/src.jar" todir="${distvdir}"/>
    <copy file="${jars}/JEvalRespClasses.jar" todir="${distvdir}"/>
    <copy file="${webdist}/index.html" todir="${distvdir}"/>
    <copy todir="${distvdir}">
      <fileset dir="${doc}" includes="*.html"/>
      <fileset dir="${basedir}" includes="*.prop"/>
      <fileset dir="${basedir}" includes="jc"/>
      <fileset dir="${basedir}" includes="jc.bat"/>
      <fileset dir="${basedir}" includes="testnetws"/>
      <fileset dir="${basedir}" includes="testnetws.bat"/>
      <fileset dir="${basedir}" includes="testnetxml"/>
      <fileset dir="${basedir}" includes="testnetxml.bat"/>
      <fileset dir="${basedir}" includes="JEvalResp"/>
      <fileset dir="${basedir}" includes="JEvalResp0"/>
    </copy>
    <mkdir dir="${dist}/jars"/>
    <copy todir="${dist}/jars">
      <fileset dir="${jars}" includes="RespCORBAStub.jar"/>
      <!-- these don't make much sense as elsewhere - Libraries.txt -->
      <fileset dir="${utils}" includes="isti.util.jar"/>
      <fileset dir="${regexp}" includes="gnu-regexp-1.1.3.jar"/>
    </copy>

    <property name="distvdocs" value="${distvdir}/javadocs"/>
    <mkdir dir="${distvdocs}"/>
    <javadoc packagenames="com.isti.jevalresp.*"
             sourcepath="${src}"
             destdir="${distvdocs}">
      <classpath refid="build.classpath"/>
    </javadoc>
    <copy todir="${distvdocs}">
      <fileset dir="${doc}/javadocs"/>
    </copy>

    <mkdir dir="${distvdir}/c"/>
    <copy todir="${distvdir}/c">
      <fileset dir="${c}"/>
    </copy>

    <property name="zip" value="JEvalResp_v${version}_dist.zip"/>
    <property name="tar" value="JEvalResp_v${version}_dist.tar.gz"/>
    <zip destfile="${dist}/${zip}"
         basedir="${dist}"
         includes="${vdir}/**"/>
    <tar destfile="${dist}/${tar}"
         basedir="${dist}"
         includes="${vdir}/**"
         compression="gzip"/>
    <copy todir="${distvdir}">
      <fileset file="${dist}/${zip}"/>
      <fileset file="${dist}/${tar}"/>
    </copy>

    <tar destfile="${dist}/JEvalResp_v${version}_webdist.tar.gz"
         basedir="${distvdir}"
         compression="gzip"/>

    <!-- delete dir="${distvdir}"/ -->

  </target>

  <target name="clean" description="clean up" >
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
    <delete dir="${tmp1}"/>
    <delete dir="${tmp2}"/>
  </target>

</project>
